generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  email            String             @unique
  password         String
  role             UserRole           @default(STUDENT)
  otp              String?
  otpExpiresAt     DateTime?
  status           UserStatus         @default(ACTIVE)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  student          Student[]
  teacher          Teacher[]
  CourseReview     CourseReview[]
  institute        Institute[]
  admin            Admin?
  Favorite         Favorite[]
  CourseCompletion CourseCompletion[]

  @@map("Users")
}

model Student {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String    @unique
  username         String?
  phoneNumber      String?
  profileImage     String?
  institute        String?
  interest         Json?
  referredId       String?   @unique
  coin             Int?      @default(0)
  stripeCustomerId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [email], references: [email])
  Payment          Payment[]

  @@map("Students")
}

model Admin {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phoneNumber  String?
  username     String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])
}

model Teacher {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String    @unique
  instituteId       String    @db.ObjectId
  username          String?
  phoneNumber       String?
  phoneNumbers      String[]  @default([])
  profileImage      String?
  yearsOfExperience Int?
  experiences       Json?
  locations         String?
  address           String?
  about             String?
  specialties      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [email], references: [email])
  institutes        Institute @relation(fields: [instituteId], references: [id])
  course            Course[]

  @@map("Teachers")
}

model Institute {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  phone           String?
  address         String?
  about           String?
  phoneNumbers    String[] @default([])
  officeVisitTime Json?
  specializations String?
  video           String?
  profileImage    String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [email], references: [email])

  course   Course[]
  Favorite Favorite[]
  Teacher  Teacher[]

  @@map("Institutes")
}

model Category {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  imageUrl String
  Course   Course[]
}

model InstituteType {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  name   String   @unique
  course Course[]
}

model Course {
  id                 String             @id @default(auto()) @map("_id") @db.ObjectId
  title              String             @unique
  startDate          DateTime
  endDate            DateTime
  description        String
  whatYouWillLearn   String
  perWeekClass       Int
  classTime          String
  courseHours        String
  courseDays         String
  level              String
  duration           String
  lessons            Int
  language           String
  price              Float
  thumbUrl           String
  availableSeats     Int
  certificateOffered Boolean
  internshipSupport  Boolean
  teacherId          String             @db.ObjectId
  Teacher            Teacher            @relation(fields: [teacherId], references: [id])
  categoryId         String             @db.ObjectId
  Category           Category           @relation(fields: [categoryId], references: [id])
  instituteId        String             @db.ObjectId
  institute          Institute          @relation(fields: [instituteId], references: [id])
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  CourseReview       CourseReview[]
  OfferedCourses     OfferedCourses[]
  Payment            Payment[]
  instituteTypeId    String?            @db.ObjectId
  InstituteType      InstituteType?     @relation(fields: [instituteTypeId], references: [id])
  CourseCompletion   CourseCompletion[]

  @@map("Courses")
}

model CourseCompletion {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  user        User             @relation(fields: [userId], references: [id]) 
  courseId    String           @db.ObjectId
  course      Course           @relation(fields: [courseId], references: [id])
  status      CompletionStatus @default(NOT_STARTED) 
  progress    Float            @default(0.0) 
  completedAt DateTime? 
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("CourseCompletions")
}

enum CompletionStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model OfferedCourses {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId          String   @db.ObjectId
  offeredPercentage Float
  course            Course   @relation(fields: [courseId], references: [id])
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model CourseReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("CourseReviews")
}

model Favorite {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  instituteId String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  institute   Institute @relation(fields: [instituteId], references: [id])

  @@map("Favorites")
}

model Payment {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  userEmail       String
  student         Student       @relation(fields: [userEmail], references: [email])
  courseId        String        @db.ObjectId
  course          Course        @relation(fields: [courseId], references: [id])
  amount          Float
  currency        String        @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentIntentId String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Refund          Refund[]

  @@map("Payments")
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model Refund {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  paymentId String       @db.ObjectId
  payment   Payment      @relation(fields: [paymentId], references: [id])
  amount    Float
  status    RefundStatus @default(PENDING)
  reason    String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("Refunds")
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum UserRole {
  STUDENT
  TEACHER
  INSTITUTE
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
