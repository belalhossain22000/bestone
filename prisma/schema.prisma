generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  password     String
  role         UserRole       @default(STUDENT)
  status       UserStatus     @default(ACTIVE)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  student      Student[]
  teacher      Teacher[]
  CourseReview CourseReview[]
  institute    Institute[]
  admin        Admin?

  @@map("Users")
}

model Student {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  username     String?
  phoneNumber  String?
  profileImage String?
  institute    String?
  interest     Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])

  @@map("Students")
}

model Admin {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String   @unique
  phoneNumber  String?
  username     String?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])
}

model Teacher {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String   @unique
  username          String?
  phoneNumber       String?
  profileImage      String?
  yearsOfExperience Int?
  locations         String?
  about             String?
  spicialities      String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [email], references: [email])
  course            Course[]

  @@map("Teachers")
}

model Institute {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  phone           String?
  address         String?
  about           String?
  specializations String?
  logoUrl         String?
  latitude        Float?
  longitude       Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userEmail       String
  user            User     @relation(fields: [userEmail], references: [email])

  course Course[]

  @@map("Institutes")
}

model Category {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  imageUrl String
  Course   Course[]
}

model Course {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  title            String @unique
  startDate        DateTime
  endDate          DateTime
  description      String
  whatYouWillLearn String
  perWeekClass     Int
  classTime        String
  courseHours      String
  courseDays       String
  level            String
  duration         String
  lessons          Int
  language         String
  price            Float
  thumbUrl          String
  teacherId        String         @db.ObjectId
  Teacher          Teacher        @relation(fields: [teacherId], references: [id])
  categoryId       String         @db.ObjectId
  Category         Category       @relation(fields: [categoryId], references: [id])
  instituteId      String         @db.ObjectId
  institute        Institute      @relation(fields: [instituteId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  CourseReview     CourseReview[]

  @@map("Courses")
}

model CourseReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  rating    Int
  review    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("CourseReviews")
}

enum UserRole {
  STUDENT
  TEACHER
  INSTITUTE
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
